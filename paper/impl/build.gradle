import java.nio.charset.StandardCharsets

plugins {
    id 'com.gradleup.shadow' version '9.0.0-rc1' apply false
}

var author = project.findProperty('author')
var apiVersion = project.findProperty('apiVersion')?.toDouble()
description = "Implementation parent module"

def crescentcore_version = project.findProperty('crescentcore_version')
def jumpwarps_version = project.findProperty('jumpwarps_version')
def artifacts_version = project.findProperty('artifacts_version')
def crystals_version = project.findProperty('crystals_version')
def dropnames_version = project.findProperty('dropnames_version')
def commandtomes_version = project.findProperty('commandtomes_version')
def triumphcmd_version = project.findProperty('triumphcmd_version')

void addRepositories(Project project) {
    project.repositories {
        mavenCentral()
        maven { url = uri('https://repo.papermc.io/repository/maven-public/') }
        maven { url = uri('https://oss.sonatype.org/content/groups/public/') }
        maven { url = uri('https://repo.maven.apache.org/maven2/') }
        maven { url = uri('https://crescentsun.it/reposilite/releases') }
        maven { url  = uri("https://maven.mrnavastar.me/releases") }
    }
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'com.gradleup.shadow'

    addRepositories(project)

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    project.version = [
            "crescent-core"            : crescentcore_version,
            "jumpwarps"                 : jumpwarps_version,
            "artifacts"                     : artifacts_version,
            "crystals"                      : crystals_version,
            "dropnames"                : dropnames_version,
            "command-tomes"      : commandtomes_version,
            "triumph-cmd"             : triumphcmd_version
    ].get(project.name)
    project.group = "it.crescentsun"
    project.description = project.description ?: "No description provided"

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    build {
        group = 'always-used'
        dependsOn(shadowJar)
    }

    dependencies {
        if (!project.name.equalsIgnoreCase("triumph-cmd")) {
            compileOnly libs.triumphcmd
        }
        compileOnly libs.paper.api
    }

    afterEvaluate {
        project.tasks.processResources {
            filteringCharset = StandardCharsets.UTF_8.name()
            def props = [
                    "name"           : project.name,
                    "description" : project.description,
                    "version"        : project.version,
                    "apiVersion"   : apiVersion,
                    "author"          : author
            ]
            inputs.properties(props)
            filesMatching("plugin.yml") {
                expand(props)
            }
        }
    }
}

tasks.register("copyAllToRemote") {
    group = 'always-used'
    description = 'Copies all subprojects to the remote server - without flags.'
    dependsOn(subprojects.collect { it.tasks.named("copyJarToRemote") })
}

subprojects {
    task buildAndCopy {
        group = 'always-used'
        description = 'Builds the project, publishes it, and copies the resulting JAR to a specified directory on the crescent-sun network.'

        dependsOn 'build', 'copyJarToRemote'
    }

    task copyJarToRemote(type: Exec) {
        group = 'always-used'
        description = 'Copies the resulting JAR to the appropriate jar directory in the dev server.\n'

        doFirst {

            def jarFile = "${buildDir}/libs/${project.name}-${version}.jar"
            def serverPort = 12622
            def ip = "crescentsun.it"

            var destinationDir = "/home/tomrom/crescent-sun/dev/paper-plugins"

            // Print version
            println "Project: ${project.name}"
            println "Version: ${version}"

            // Delete any files starting with ${project.name} in the subdirectory
            commandLine 'scp', '-P', "${serverPort}", jarFile, "tomrom@${ip}:${destinationDir}"
        }
    }
}

tasks.register("buildAndCopyAll") {
    group = 'always-used'
    description = 'Builds all subprojects and then copies their JARs to the remote server'

    // First, depend on the 'build' task for all subprojects
    dependsOn(subprojects.collect { proj ->
        proj.tasks.matching { it.name == 'build' }
    })

    // Then, depend on the 'copyJarToRemote' task for all subprojects
    finalizedBy(subprojects.collect { proj ->
        proj.tasks.matching { it.name == 'copyJarToRemote' }
    })
}