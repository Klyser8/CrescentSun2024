plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
}

def channelhandler_version = project.findProperty('channelhandler_version')

void addRepositories(Project project) {
    project.repositories {
        mavenCentral()
        maven { url = uri('https://repo.papermc.io/repository/maven-public/') }
        maven { url = uri('https://oss.sonatype.org/content/groups/public/') }
        maven { url  = uri("https://maven.mrnavastar.me/releases") }
        maven { url = uri('https://repo.triumphteam.dev/snapshots/') }
        maven { url = uri('https://crescentsun.it/reposilite/releases') }
    }
}

subprojects {
    apply plugin: 'java-library'

    addRepositories(project)

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    project.version = [
            "channel-handler" : channelhandler_version
    ].get(project.name)
    project.group = "it.crescentsun"
    project.description = project.description ?: "No description provided"

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    task buildAndCopy {
        group = 'always-used'
        description = 'Builds the project, publishes it, and copies the resulting JAR to a specified directory on the crescent-sun network.'

        dependsOn 'build', 'copyJarToRemote'
    }

    task copyJarToRemote(type: Exec) {
        group = 'Custom'
        description = 'Copies the resulting JAR to the appropriate jar directory in the dev server.\n'

        doFirst {

            def jarFile = "${buildDir}/libs/${project.name}-${version}.jar"
            def serverPort = 12622
            def ip = "crescentsun.it"

            var destinationDir = "/home/tomrom/crescent-sun/dev/velocity-plugins"

            // Print version
            println "Project: ${project.name}"
            println "Version: ${version}"

            // Delete any files starting with ${project.name} in the subdirectory
            commandLine 'scp', '-P', "${serverPort}", jarFile, "tomrom@${ip}:${destinationDir}"
        }
    }

    build {
        group = 'always-used'
    }
    copyJarToRemote {
        group = 'always-used'
    }

    dependencies {
        compileOnly libs.velocity.api
        implementation libs.crescent.common
        implementation libs.crescentmsg
    }
}

def targetJavaVersion = 21
java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(targetJavaVersion)
}
